###################################################################################################
#### Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
####
#### Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file
#### except in compliance with the License. A copy of the License is located at
####
####     http://aws.amazon.com/apache2.0/
####
#### or in the "license" file accompanying this file. This file is distributed on an "AS IS"
#### BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#### License for the specific language governing permissions and limitations under the License.
###################################################################################################

###################################################################################################
#### By default, Elastic Beanstalk creates all of your application's compute and networking
#### resources in the default VPC. Use this template to create a custom VPC to isolate your
#### environment's resources in a private subnet with customizable security.
####
#### This template creates the following resources-
####   - A VPC with the IP range 172.31.0.0/16
####   - 2 private subnets for the EC2 instances that run your application
####   - 2 public subnets for the load balancer that routes traffic to the instances
####   - An Internet gateway, NAT gateway, and route table to allow the instances
####     to communicate with the load balancer and the Internet.
####
###################################################################################################

Resources:
  ChiebukuroVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.31.0.0/16
      Tags:
        - Key: Name
          Value: !Join ["_", [!Ref 'AWS::StackName']]
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref ChiebukuroVPC
      AvailabilityZone:
        Fn::Select:
         - 0
         - Fn::GetAZs: ""
      CidrBlock: 172.31.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["_", [!Ref 'AWS::StackName',Public]]
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
         - 1
         - Fn::GetAZs: ""
      VpcId: !Ref ChiebukuroVPC
      CidrBlock: 172.31.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["_", [!Ref 'AWS::StackName',Public]]
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref ChiebukuroVPC
      AvailabilityZone:
        Fn::Select:
         - 0
         - Fn::GetAZs: ""
      CidrBlock: 172.31.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["_", [!Ref 'AWS::StackName',Private]]
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref ChiebukuroVPC
      AvailabilityZone:
        Fn::Select:
         - 1
         - Fn::GetAZs: ""
      CidrBlock: 172.31.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["_", [!Ref 'AWS::StackName',Private]]
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["_", [!Ref 'AWS::StackName']]
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref ChiebukuroVPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref ChiebukuroVPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  
  VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      RouteTableIds: 
        - !Ref PublicRouteTable
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      VpcId: !Ref ChiebukuroVPC
  s3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      BucketName: !Ref 'AWS::StackName'

  ElasticBeanstalkApp:
    Type: AWS::ElasticBeanstalk::Application
    Properties: 
      ApplicationName: !Join ["_", [!Ref 'AWS::StackName']]
      Description: ns2018_Graduation_work
  ElasticBeanstalkEnv:
    Type: AWS::ElasticBeanstalk::Environment
    Properties: 
      ApplicationName: !Join ["_", [!Ref 'AWS::StackName']]
      Description: ASO-ChiebukuroApp's_Enviroment
      SolutionStackName: 64bit Amazon Linux 2 v3.1.1 running Python 3.7
      OptionSettings: 
        - Namespace : aws:ec2:vpc
          OptionName : VPCId
          Value: !Ref ChiebukuroVPC
        - Namespace : aws:ec2:vpc
          OptionName: Subnets
          Value: !Join [",", [!Ref PublicSubnet1 , !Ref PublicSubnet2]]
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: aws-elasticbeanstalk-service-role
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: aws-elasticbeanstalk-ec2-role

Outputs:
  PubPrivateVPCID:
    Description: VPC ID
    Value: !Ref "ChiebukuroVPC"
    Export:
      Name: BeanstalkVPCID
  PrivateSubnet1ID:
    Description: Private Subnet A ID
    Value: !Ref "PrivateSubnet1"
    Export:
      Name: BeanstalkPrivateSubnet1ID
  PrivateSubnet2ID:
    Description: Private Subnet B ID
    Value: !Ref "PrivateSubnet2"
    Export:
      Name: BeanstalkPrivateSubnet2ID
  PublicSubnet1ID:
    Description: Public Subnet A ID
    Value: !Ref "PublicSubnet1"
    Export:
      Name: BeanstalkPublicSubnet1ID
  PublicSubnet2ID:
    Description: Public Subnet B ID
    Value: !Ref "PublicSubnet2"
    Export:
      Name: BeanstalkPublicSubnet2ID
